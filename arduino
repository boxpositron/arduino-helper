#!/bin/bash

set -euo pipefail

# Verify arduino-cli is installed

if ! command -v arduino-cli &> /dev/null
then
    echo "arduino-cli could not be found"
    exit 1
fi

# Verify fzf is installed

if ! command -v fzf &> /dev/null
then
    echo "fzf could not be found"
    exit 1
fi

# Verify jq is installed

if ! command -v jq &> /dev/null
then
    echo "jq could not be found"
    exit 1
fi


function get_devices() {
    device_list=$1

    devices=$(echo "$device_list" | jq -r '.detected_ports[] | select(has("matching_boards") and has("port")) | .matching_boards[0].name + " - " + .port.label + " - " + .port.protocol_label')
    echo "$devices"

}


function get_device_name() {
    device=$1

    device_name=$(echo "$device" | cut -d'-' -f1 | xargs)

    echo "$device_name"
}

function get_device_port(){

    device=$1

    device_port=$(echo "$device" | cut -d'-' -f2 | xargs)

    echo "$device_port"
}

function get_device_fbqn() {
    device=$1
    # Split the device string to get the device name , device port label

    device_name=$(get_device_name "$device")
    device_port=$(get_device_port "$device")

    # Select the fqbn from the device selected
    fqbn=$(echo "$device_list" | jq -r --arg device_name "$device_name" --arg device_port "$device_port" '.detected_ports[] | select(has("matching_boards") and has("port")) | select(.matching_boards[0].name == $device_name and .port.label == $device_port) | .matching_boards[0].fqbn')   

    echo "$fqbn"
}

# Valid commands supported by this helper script
# Missing fields will be generated by the script and provided by fzf
# help  -- Displays this help message
# list  -- Displays the list of boards connected to this computer
# build <File.ino>  -- Compiles the given file
# upload <File.ino> -- Uploads the given file to the board
# launch <File.ino> -- Compiles and uploads the given file to the board

VALID_COMMANDS=("help" "list" "build" "upload" "launch")

# Let's verify the first argument is a valid command

if [ "$#" -lt 1 ]; then
    echo "No command provided"
    exit 1
fi

COMMAND=$1

if [[ ! " ${VALID_COMMANDS[@]} " =~ " ${COMMAND} " ]]; then
    echo "Invalid command"
    exit 1
fi

# Handling the help command


if [ "$COMMAND" == "help" ]; then
    echo "Usage: arduino <command> [options]"
    echo "Commands:"
    echo "  help  -- Displays this help message"
    echo "  list  -- Displays the list of boards connected to this computer"
    echo "  build <File.ino>  -- Compiles the given file"
    echo "  upload <File.ino> -- Uploads the given file to the board"
    echo "  launch <File.ino> -- Compiles and uploads the given file to the board"
    exit 0
fi


device_list=$(arduino-cli board list --format json)
# Handling the list command

if [ "$COMMAND" == "list" ]; then

    # {
    #   "detected_ports": [
    #     {
    #       "matching_boards": [
    #         {
    #           "name": "Arduino UNO R4 Minima",
    #           "fqbn": "arduino:renesas_uno:minima"
    #         }
    #       ],
    #       "port": {
    #         "address": "/dev/cu.usbmodem101",
    #         "label": "/dev/cu.usbmodem101",
    #         "protocol": "serial",
    #         "protocol_label": "Serial Port (USB)",
    #         "properties": {
    #           "pid": "0x0069",
    #           "serialNumber": "340223295A3130343BBF33384B572661",
    #           "vid": "0x2341"
    #         },
    #         "hardware_id": "340223295A3130343BBF33384B572661"
    #       }
    #     }
    #   ]
    # }
    #

    
    get_devices "$device_list" | column -t -s '-'
    exit 0
fi


# Verify a second argument is passed. If its not passed lets get  list of files in the current director and ask the user to select one with fzf

if [ "$#" -lt 2 ]; then
    files=$(ls *.ino)
    file=$(echo "$files" | fzf)
    if [ -z "$file" ]; then
        echo "No file selected"
        exit 1
    fi
else
    file=$2
fi


# Handling the build command

if [ "$COMMAND" == "build" ]; then

    # Ask for device with fzf
    
    devices=$(get_devices "$device_list")

    # If no device is found, exit

    if [ -z "$devices" ]; then
        echo "No devices found"
        exit 1
    fi


    device=$(echo "$devices" | fzf)

    if [ -z "$device" ]; then
        echo "No device selected"
        exit 1
    fi
    
    fqbn=$(get_device_fbqn "$device")

    if [ -z "$fqbn" ]; then
        echo "No fqbn found for the selected device"
        exit 1
    fi

    echo "Building $file for $device"

    arduino-cli compile --fqbn "$fqbn" "$file"

    echo "Build complete"

    exit 0
fi

# Handling the upload command


if [ "$COMMAND" == "upload" ]; then

    # Ask for device with fzf

    devices=$(get_devices "$device_list")
    # If no device is found, exit

    if [ -z "$devices" ]; then
        echo "No devices found"
        exit 1
    fi

    
    device=$(echo "$devices" | fzf)

    if [ -z "$device" ]; then
        echo "No device selected"
        exit 1
    fi

    fqbn=$(get_device_fbqn "$device")    


    if [ -z "$fqbn" ]; then
        echo "No fqbn found for the selected device"
        exit 1
    fi

    echo "Uploading $file to $device"

    device_port=$(get_device_port "$device")

    arduino-cli upload -p "$device_port" --fqbn "$fqbn" "$file"

    echo "Upload complete"

    exit 0
fi


# Handling the launch command - This command builds and uploads the file to the board


if [ "$COMMAND" == "launch" ]; then

    devices=$(get_devices "$device_list")

    # If no device is found, exit
    
    if [ -z "$devices" ]; then
        echo "No devices found"
        exit 1
    fi

    
    device=$(echo "$devices" | fzf)

    if [ -z "$device" ]; then
        echo "No device selected"
        exit 1
    fi

    fqbn=$(get_device_fbqn "$device" "$device_list")    


    if [ -z "$fqbn" ]; then
        echo "No fqbn found for the selected device"
        exit 1
    fi

    echo "Launching $file to $device"

    device_port=$(get_device_port "$device")

    arduino-cli compile --fqbn "$fqbn" "$file"

    arduino-cli upload -p "$device_port" --fqbn "$fqbn" "$file"

    echo "Launch complete"

    exit 0


fi
